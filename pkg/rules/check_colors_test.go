package rules

import (
	"testing"

	"github.com/joesantos418/joe-chess/pkg/board"
	"github.com/stretchr/testify/assert"
)

func TestSetPiece(t *testing.T) {
	g := NewGame()

	is := isColorsTurn(board.WHITE_KNIGHT_KING, g)
	assert.True(t, is)

	is = isColorsTurn(board.BLACK_KNIGHT_KING, g)
	assert.False(t, is)
}

func TestIsPieceWhite(t *testing.T) {
	var is bool

	is = isPieceWhite(board.NO_PIECE)
	assert.False(t, is)

	is = isPieceWhite(board.WHITE_PAWN_A)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_PAWN_B)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_PAWN_C)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_PAWN_D)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_PAWN_E)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_PAWN_F)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_PAWN_G)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_PAWN_H)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_ROOK_QUEEN)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_ROOK_KING)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_KNIGHT_QUEEN)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_KNIGHT_KING)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_BISHOP_QUEEN)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_BISHOP_KING)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_QUEEN)
	assert.True(t, is)
	is = isPieceWhite(board.WHITE_KING)
	assert.True(t, is)

	is = isPieceWhite(board.BLACK_PAWN_A)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_PAWN_B)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_PAWN_C)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_PAWN_D)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_PAWN_E)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_PAWN_F)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_PAWN_G)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_PAWN_H)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_ROOK_QUEEN)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_ROOK_KING)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_KNIGHT_QUEEN)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_KNIGHT_KING)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_BISHOP_QUEEN)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_BISHOP_KING)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_QUEEN)
	assert.False(t, is)
	is = isPieceWhite(board.BLACK_KING)
	assert.False(t, is)
}

func TestIsPieceBlack(t *testing.T) {
	var is bool

	is = isPieceBlack(board.NO_PIECE)
	assert.False(t, is)

	is = isPieceBlack(board.WHITE_PAWN_A)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_PAWN_B)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_PAWN_C)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_PAWN_D)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_PAWN_E)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_PAWN_F)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_PAWN_G)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_PAWN_H)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_ROOK_QUEEN)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_ROOK_KING)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_KNIGHT_QUEEN)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_KNIGHT_KING)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_BISHOP_QUEEN)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_BISHOP_KING)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_QUEEN)
	assert.False(t, is)
	is = isPieceBlack(board.WHITE_KING)
	assert.False(t, is)

	is = isPieceBlack(board.BLACK_PAWN_A)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_PAWN_B)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_PAWN_C)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_PAWN_D)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_PAWN_E)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_PAWN_F)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_PAWN_G)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_PAWN_H)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_ROOK_QUEEN)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_ROOK_KING)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_KNIGHT_QUEEN)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_KNIGHT_KING)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_BISHOP_QUEEN)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_BISHOP_KING)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_QUEEN)
	assert.True(t, is)
	is = isPieceBlack(board.BLACK_KING)
	assert.True(t, is)
}
